android_keystore_path=""
apple_username = ""
apple_entity_name = ""
firebase_android_distribution_groups = ""
firebase_ios_distribution_groups = ""
firebase_token = ""
xcodeproj = File.absolute_path("../ios/#{ENV['SCHEME']}.xcodeproj")
xcworkspace = File.absolute_path("../ios/#{ENV['SCHEME']}.xcworkspace")
github_match_url = "https://github.com/bricezele/certificate-manager"
plist_file_path = "../ios/#{ENV['APPLE_TEAM_ID']}/Info.plist"
ios_app_scheme = ENV["SCHEME"]
code_signing_identity = "Apple Distribution: Media Press Africa LLC (#{ENV['APPLE_TEAM_ID']})"
api_environment = ENV["ENV"]
flavor_scheme = ENV["FLAVOR"]
adhoc_provision_file = "match AdHoc #{ENV['BUNDLE_ID']}"
appstore_provision_file = "match AppStore #{ENV['BUNDLE_ID']}"

platform :android do
   desc "Android Build (#{api_environment}) and Deploy to Firebase App Distribution"
  lane :firebase do |options|
    increment_version_code(gradle_file_path: File.absolute_path('../android/app/build.gradle'))

    gradle(task: 'clean', project_dir: File.absolute_path(android_keystore_path))
    gradle(
      task: options[:release] ? 'bundle' : 'assemble',
      flavor: api_environment,
      build_type: options[:release] ? "Release" : "Debug",
      project_dir: File.absolute_path('../android'),
      properties: {
          "android.injected.signing.store.file" => File.absolute_path(""),
          "android.injected.signing.store.password" => ENV['ANDROID_KEYSTORE_PASSWORD'],
          "android.injected.signing.key.alias" => ENV['ANDROID_KEYSTORE_ALIAS'],
          "android.injected.signing.key.password" => ENV['ANDROID_KEYSTORE_PASSWORD']
        }
    )
    firebase_app_distribution(
      app: ENV['FIREBASE_ANDROID_APP_ID'],
      groups: firebase_android_distribution_groups,
      service_credentials_file: File.absolute_path("./service-account/firebase-service-account.json"),
      android_artifact_type: options[:release] ? "AAB" : "APK",
      release_notes: "Environment: #{api_environment}",
      firebase_cli_token: firebase_token,
    )
  end

  desc "Android Beta - Bundle #{api_environment} and Deploy to Play Store Beta"
  lane :beta do
    increment_version_code(version_code: ENV['VERSION_CODE'].to_i, gradle_file_path: File.absolute_path('../android/app/build.gradle'))
    increment_version_name(version_name: ENV['VERSION_NAME'], gradle_file_path: File.absolute_path('../android/app/build.gradle'))
    gradle(task: 'clean', project_dir: File.absolute_path('../android'))
    gradle(
      task: 'bundle',
      flavor: api_environment,
      build_type: "Release",
      project_dir: File.absolute_path('../android'),
       properties: {
         "android.injected.signing.store.file" => File.absolute_path(android_keystore_path),
         "android.injected.signing.store.password" => ENV['ANDROID_KEYSTORE_PASSWORD'],
         "android.injected.signing.key.alias" => ENV['ANDROID_KEYSTORE_ALIAS'],
         "android.injected.signing.key.password" => ENV['ANDROID_KEYSTORE_PASSWORD']
       }
    )
    upload_to_play_store(
      track: 'beta',
      aab: File.absolute_path("../android/app/build/outputs/bundle/#{api_environment}Release/app-#{api_environment}-release.aab"),
      release_status: 'draft',
      package_name: ENV['BUNDLE_ID'],
      json_key: File.absolute_path("./service-account/playstore-service-account.json"),
    )

  end

  desc "Android Release Build and Deploy to Play Store Production"
  lane :production do
    increment_version_code(version_code: ENV['VERSION_CODE'].to_i, gradle_file_path: File.absolute_path('../android/app/build.gradle'))
    increment_version_name(version_name: ENV['VERSION_NAME'], gradle_file_path: File.absolute_path('../android/app/build.gradle'))
    gradle(task: 'clean', project_dir: File.absolute_path('../android'))
    gradle(
      task: 'bundle',
      flavor: api_environment,
      build_type: 'Release',
      project_dir: File.absolute_path('../android'),
      properties: {
        "android.injected.signing.store.file" => File.absolute_path(android_keystore_path),
        "android.injected.signing.store.password" => ENV['ANDROID_KEYSTORE_PASSWORD'],
        "android.injected.signing.key.alias" => ENV['ANDROID_KEYSTORE_ALIAS'],
        "android.injected.signing.key.password" => ENV['ANDROID_KEYSTORE_PASSWORD']
      }
    )
    upload_to_play_store(
      track: 'production',
      aab: File.absolute_path('../android/app/build/outputs/bundle/release/app-release.aab'),
      release_status: 'draft',
      package_name: ENV['BUNDLE_ID'],
      json_key: File.absolute_path("./service-account/playstore-service-account.json"),
    )
  end
end

def delete_temp_keychain(name)
  delete_keychain(
    name: name
  ) if File.exist? File.expand_path("~/Library/Keychains/#{name}-db")
end

def create_temp_keychain(name, password)
create_keychain(
  name: name,
  password: password,
  unlock: false,
  timeout: 0
)
end

def ensure_temp_keychain(name, password)
  delete_temp_keychain(name)
  create_temp_keychain(name, password)
end

platform :ios do
  desc "iOS Build and Deploy to Firebase App Distribution"
  lane :firebase do |options|
    xcodes(
      version: "15.2",
      select_for_current_build_only: true
    )

    keychain_name = "temp_keychain_username"
    keychain_password = "temp_keychain_password"
    ensure_temp_keychain(keychain_name, keychain_password)

    # increment_build_number(
    #  xcodeproj: xcodeproj
    # )
    cocoapods(
      clean_install: true,
      repo_update: true,
      podfile: File.absolute_path('../ios/Podfile')
    )

    api_key = app_store_connect_api_key(
      key_id: ENV['APPLE_API_KEY_ID'],
      issuer_id: ENV['APPLE_ISSUER_ID'],
      key_filepath: File.absolute_path("../AppleApiKey.p8"),
      duration: 1200,
      in_house: false
    )
    sync_code_signing(
      type: "adhoc",
      team_id: ENV['APPLE_TEAM_ID'],
      app_identifier: ENV['BUNDLE_ID'],
      git_basic_authorization: Base64.strict_encode64(ENV['GIT_PERSONAL_ACCESS_TOKEN']),
      keychain_name: keychain_name,
      keychain_password: keychain_password,
      git_url: github_match_url,
      api_key: api_key
    )
    update_project_provisioning(
      xcodeproj: xcodeproj,
      target_filter: ios_app_scheme,
      profile: ENV["sigh_#{ENV['BUNDLE_ID']}_adhoc_profile-path"],
      build_configuration: "Release"
    )
    update_project_team(
      path: xcodeproj,
      teamid: ENV['APPLE_TEAM_ID']
    )
    build_app(
      export_team_id: ENV['APPLE_TEAM_ID'],
      configuration: options[:release] ? "Release-#{flavor_scheme}" : "Debug-#{flavor_scheme}",
      workspace: xcworkspace,
      scheme: flavor_scheme,
      codesigning_identity: code_signing_identity,
      export_method: "ad-hoc",
      export_options: {
        provisioningProfiles: {
          ENV['BUNDLE_ID'] => adhoc_provision_file
        }
      },
      output_directory: "./fastlane/artifacts", # Destination directory. Defaults to current directory.
      output_name: "#{ios_app_scheme}_#{api_environment}.ipa",           # specify the name of the .ipa file to generate (including file extension)
    )
    firebase_app_distribution(
      app: ENV['FIREBASE_APPLE_APP_ID'],
      groups: firebase_ios_distribution_groups,
      service_credentials_file: File.absolute_path("./service-account/firebase-service-account.json"),
      release_notes: "Environment: #{api_environment}",
      firebase_cli_token: firebase_token,
    )
    delete_temp_keychain(keychain_name)
  end

  desc "iOS Build and Deploy to TestFlight"
  lane :testflight do
    xcodes(
      version: "15.2",
      select_for_current_build_only: true
    )

    keychain_name = "temp_keychain_username"
    keychain_password = "temp_keychain_password"
    ensure_temp_keychain(keychain_name, keychain_password)

     increment_build_number(
      xcodeproj: xcodeproj,
      build_number: ENV['BUILD_NUMBER']
     )
     increment_version_number(
      xcodeproj: xcodeproj,
      version_number: ENV['VERSION_NUMBER']
    )

    cocoapods(
      clean_install: true,
      repo_update: true,
      podfile: File.absolute_path('../ios/Podfile')
    )

    api_key = app_store_connect_api_key(
      key_id: ENV['APPLE_API_KEY_ID'],
      issuer_id: ENV['APPLE_ISSUER_ID'],
      key_filepath: File.absolute_path("../AppleApiKey.p8"),
      duration: 1200,
      in_house: false
    )

    sync_code_signing(
      type: "appstore",
      team_id: ENV['APPLE_TEAM_ID'],
      app_identifier: ENV['BUNDLE_ID'],
      git_basic_authorization: Base64.strict_encode64(ENV['GIT_PERSONAL_ACCESS_TOKEN']),
      keychain_name: keychain_name,
      keychain_password: keychain_password,
      git_url: github_match_url,
      api_key: api_key
    )
    update_project_provisioning(
      xcodeproj: xcodeproj,
      target_filter: ios_app_scheme,
      profile: ENV["sigh_#{ENV['BUNDLE_ID']}_appstore_profile-path"],
      build_configuration: "Release"
    )
    update_project_team(
      path: xcodeproj,
      teamid: ENV['APPLE_TEAM_ID']
    )
    build_app(
      export_team_id: ENV['APPLE_TEAM_ID'],
      configuration: "Release-#{flavor_scheme}",
      workspace: xcworkspace,
      scheme: flavor_scheme,
      export_method: "app-store",
      export_options: {
        provisioningProfiles: {
          ENV['BUNDLE_ID'] => appstore_provision_file
        }
      },
      output_directory: "./fastlane/artifacts", # Destination directory. Defaults to current directory.
      output_name: "#{ios_app_scheme}_#{api_environment}.ipa",           # specify the name of the .ipa file to generate (including file extension)
    )

    upload_to_testflight(
      apple_id: ENV['APPLE_APP_ID'],
      app_identifier: ENV['BUNDLE_ID'],
      skip_waiting_for_build_processing: true,
      skip_submission: true,
      distribute_external: false,
      notify_external_testers: false
    )

    version = get_version_number(xcodeproj: xcodeproj)
    build = get_build_number(xcodeproj: xcodeproj)
    clean_build_artifacts

    delete_temp_keychain(keychain_name)
  end

  desc "iOS Build and Deploy to App Store"
  lane :production do
    xcodes(
      version: "15.2",
      select_for_current_build_only: true
    )

    keychain_name = "temp_keychain_username"
    keychain_password = "temp_keychain_password"
    ensure_temp_keychain(keychain_name, keychain_password)

    # increment_build_number(
    #   xcodeproj: xcodeproj,
    #   build_number: ENV['BUILD_NUMBER']
    # )
    # increment_version_number(
    #   xcodeproj: xcodeproj,
    #   version_number: ENV['VERSION_NUMBER']
    # )

    cocoapods(
      clean_install: true,
      repo_update: true,
      podfile: File.absolute_path('../ios/Podfile')
    )

    api_key = app_store_connect_api_key(
      key_id: ENV['APPLE_API_KEY_ID'],
      issuer_id: ENV['APPLE_ISSUER_ID'],
      key_filepath: File.absolute_path("../AppleApiKey.p8"),
      duration: 1200,
      in_house: false
    )

    sync_code_signing(
      type: "appstore",
      team_id: ENV['APPLE_TEAM_ID'],
      app_identifier: ENV['BUNDLE_ID'],
      git_basic_authorization: Base64.strict_encode64(ENV['GIT_PERSONAL_ACCESS_TOKEN']),
      keychain_name: keychain_name,
      keychain_password: keychain_password,
      git_url: github_match_url,
      api_key: api_key
    )
    update_project_provisioning(
      xcodeproj: xcodeproj,
      target_filter: ios_app_scheme,
      profile: ENV["sigh_#{ENV['BUNDLE_ID']}_appstore_profile-path"],
      build_configuration: "Release"
    )
    update_project_team(
      path: xcodeproj,
      teamid: ENV['APPLE_TEAM_ID']
    )
    build_app(
      export_team_id: ENV['APPLE_TEAM_ID'],
      configuration: "Release-#{flavor_scheme}",
      workspace: xcworkspace,
      scheme: flavor_scheme,
      export_method: "app-store",
      export_options: {
        provisioningProfiles: {
          ENV['BUNDLE_ID'] => appstore_provision_file
        }
      },
      output_directory: "./fastlane/artifacts", # Destination directory. Defaults to current directory.
      output_name: "#{ios_app_scheme}_#{api_environment}.ipa",           # specify the name of the .ipa file to generate (including file extension)
    )

    upload_to_app_store(
      api_key: api_key,
      app_identifier: ENV['BUNDLE_ID'],
      precheck_include_in_app_purchases: false,
      force: true # have to use force otherwise fastlane requires user input (not possible on CI piplines)
    )

    version = get_version_number(xcodeproj: xcodeproj)
    build = get_build_number(xcodeproj: xcodeproj)
    clean_build_artifacts

    delete_temp_keychain(keychain_name)
  end
end
